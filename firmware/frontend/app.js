const API="/api";let scanning=!1;const $=e=>document.getElementById(e),els={deviceInfo:$("device-info"),message:$("message"),currentWifiConfig:$("current-wifi-config"),currentRocrailConfig:$("current-rocrail-config"),savedNetworksList:$("saved-networks-list"),loading:$("loading"),ssid:$("ssid"),customGroup:$("custom-group"),customSsid:$("custom-ssid"),password:$("password"),rocrailIp:$("rocrail-ip"),rocrailPort:$("rocrail-port")},getTempClass=e=>null===e?"unavailable":e<40?"normal":e<60?"warm":e<80?"hot":"critical",isValidIP=e=>/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(e),getSignalText=e=>e>=-50?"Excellent":e>=-60?"Good":e>=-70?"Fair":"Poor";function showMessage(e,s="info"){els.message.textContent=e,els.message.className=`message ${s}`,els.message.style.display="block",setTimeout(()=>els.message.style.display="none",5e3)}function showLoading(e=!0){els.loading.style.display=e?"block":"none"}function setButtonsEnabled(e=!0){["save-wifi-btn","test-wifi-btn","save-rocrail-btn","clear-rocrail-btn","refresh-btn","forget-wifi-btn","restart-btn"].forEach(s=>$(s).disabled=!e)}async function apiCall(e,s={}){try{let t=await fetch("/api"+e,{headers:{"Content-Type":"application/json",...s.headers},...s});if(!t.ok)throw Error(`HTTP ${t.status}`);return await t.json()}catch(a){throw console.error("API Error:",a),a}}async function loadDeviceStatus(){try{let e=await apiCall("/status"),s=null!==e.temperature?`<br><b>Temperature:</b> <span class="temp-${getTempClass(e.temperature)}">${e.temperature}\xb0C</span>`:'<br><b>Temperature:</b> <span class="temp-unavailable">N/A</span>';return els.deviceInfo.innerHTML=`<b>Device:</b> ${e.device}<br><b>Memory:</b> ${e.memory} KB${s}<br><b>AP:</b> ${e.ap_ssid}${e.failure_count>0?`<br><b>‚ö†Ô∏è Failures:</b> ${e.failure_count}`:""}`,e}catch(t){els.deviceInfo.innerHTML='<b>Device:</b> ESP32/ESP8266<br><b>Memory:</b> Loading...<br><b>Temperature:</b> <span class="temp-unavailable">N/A</span><br><b>Status:</b> Error',showMessage("Failed to load device status","error")}}async function loadWifiStatus(){try{let e=await apiCall("/status"),s=e.current_ssid||"Not configured",t=e.failure_count>0?` ‚ö†Ô∏è (${e.failure_count} failures)`:"",a=e.saved_networks_count?` ‚Ä¢ ${e.saved_networks_count} saved`:"";return els.currentWifiConfig.innerHTML=`<b>Current:</b> ${s}${t}${a}`,e}catch(o){showMessage("Failed to load WiFi status","error")}}async function loadSavedNetworks(){try{let e=await apiCall("/wifi-networks"),s=e.networks||[],t=$("network-count");return t&&(t.textContent=s.length),els.savedNetworksList.innerHTML=0===s.length?'<div class="empty-networks">No networks saved yet.</div>':s.map((e,s)=>`
                <div class="network-item">
                    <div class="network-info">
                        <div class="network-name">${e.ssid}</div>
                        <div class="network-details">${e.failures>0?`‚ùå ${e.failures} failures`:"‚úÖ Working"}${0===s?" ‚Ä¢ Primary":""}</div>
                    </div>
                    <div class="network-actions">
                        <button class="btn btn-warning btn-small" onclick="removeNetwork('${e.ssid}')">üóëÔ∏è Remove</button>
                    </div>
                </div>
            `).join(""),s}catch(a){els.savedNetworksList.innerHTML='<div class="empty-networks">Failed to load networks</div>',$("network-count")&&($("network-count").textContent="0"),showMessage("Failed to load saved networks","error")}}async function loadRocrailStatus(){try{let e=await apiCall("/rocrail");return els.currentRocrailConfig.innerHTML=`<b>Current Server:</b> ${e.ip?`${e.ip}:${e.port}`:"Not configured"}`,els.rocrailIp.value=e.ip||"",els.rocrailPort.value=e.port||8051,e}catch(s){els.currentRocrailConfig.innerHTML="<b>Current Server:</b> Not configured",els.rocrailIp.value="",els.rocrailPort.value="8051",showMessage("Failed to load Rocrail status","error")}}async function loadNetworks(){if(!scanning){scanning=!0,setButtonsEnabled(!1),showLoading(!0);try{let e=await apiCall("/networks");els.ssid.innerHTML='<option value="">Select network...</option>';let s=e.networks_detailed||e.networks||[];s.forEach(s=>{let t=document.createElement("option");"object"==typeof s?(t.value=s.ssid,t.textContent=`${s.ssid} (${getSignalText(s.rssi)} - ${s.rssi} dBm)`,s.ssid===e.current_ssid&&(t.selected=!0)):(t.value=s,t.textContent=s,s===e.current_ssid&&(t.selected=!0)),els.ssid.appendChild(t)});let t=document.createElement("option");t.value="__custom__",t.textContent="Enter custom SSID",els.ssid.appendChild(t),showMessage(`Found ${s.length} networks`,"success")}catch(a){showMessage("Failed to scan networks","error"),els.ssid.innerHTML='<option value="">Select network...</option><option value="__custom__">Enter custom SSID</option>'}finally{scanning=!1,setButtonsEnabled(!0),showLoading(!1)}}}async function addWifiNetwork(e=!1){let s="__custom__"===els.ssid.value?els.customSsid.value:els.ssid.value,t=els.password.value;if(!s.trim()){showMessage("Please enter a network name","error");return}setButtonsEnabled(!1),showMessage(`${e?"Testing & adding":"Adding"} network...`,"info");try{let a=await apiCall(e?"/test":"/wifi-networks",{method:"POST",body:JSON.stringify({ssid:s,password:t})});a.success?(showMessage(a.message,"success"),els.password.value="","__custom__"===els.ssid.value?(els.customSsid.value="",els.ssid.value="",els.customGroup.style.display="none"):els.ssid.value="",setTimeout(()=>{loadSavedNetworks(),loadWifiStatus()},500)):showMessage(a.message,"error")}catch(o){showMessage(`Failed to ${e?"test &":""} add network`,"error")}finally{setButtonsEnabled(!0)}}async function removeNetwork(e){if(confirm(`Remove network "${e}"?`)){setButtonsEnabled(!1),showMessage(`Removing ${e}...`,"info");try{let s=await apiCall(`/wifi-networks/${encodeURIComponent(e)}`,{method:"DELETE"});s.success?(showMessage(s.message,"success"),loadSavedNetworks(),loadWifiStatus()):showMessage(s.message,"error")}catch(t){showMessage("Failed to remove network","error")}finally{setButtonsEnabled(!0)}}}async function saveRocrailConfig(){let e=els.rocrailIp.value.trim(),s=parseInt(els.rocrailPort.value);if(e&&!isValidIP(e)){showMessage("Invalid IP address","error");return}if(isNaN(s)||s<1||s>65535){showMessage("Invalid port number","error");return}setButtonsEnabled(!1),showMessage("Saving Rocrail config...","info");try{let t=await apiCall("/rocrail",{method:"POST",body:JSON.stringify({ip:e,port:s})});t.success?(showMessage(t.message,"success"),loadRocrailStatus()):showMessage(t.message,"error")}catch(a){showMessage("Failed to save Rocrail config","error")}finally{setButtonsEnabled(!0)}}async function clearRocrailConfig(){if(confirm("Clear Rocrail configuration?")){setButtonsEnabled(!1),showMessage("Clearing config...","info");try{let e=await apiCall("/rocrail",{method:"POST",body:JSON.stringify({ip:"",port:8051})});e.success?(showMessage(e.message,"success"),loadRocrailStatus()):showMessage(e.message,"error")}catch(s){showMessage("Failed to clear config","error")}finally{setButtonsEnabled(!0)}}}async function forgetWiFi(){if(confirm("Forget ALL WiFi networks?")){setButtonsEnabled(!1),showMessage("Forgetting networks...","info");try{let e=await apiCall("/forget",{method:"POST"});e.success?(showMessage(e.message,"success"),loadWifiStatus(),loadSavedNetworks(),loadNetworks(),els.password.value=""):showMessage(e.message||"Failed to forget networks","error")}catch(s){showMessage("Failed to forget networks","error")}finally{setButtonsEnabled(!0)}}}async function restartDevice(){if(confirm("Restart device?")){setButtonsEnabled(!1),showMessage("Restarting...","info");try{await apiCall("/restart",{method:"POST"});let e=5,s=setInterval(()=>{showMessage(`Restarting... ${e}s`,"info"),--e<0&&(clearInterval(s),showMessage("Device restarted. You can close this page.","success"))},1e3)}catch(t){showMessage("Restart initiated","success")}}}function setupEvents(){els.ssid.addEventListener("change",()=>{let e="__custom__"===els.ssid.value;els.customGroup.style.display=e?"block":"none",e?els.customSsid.focus():els.ssid.value&&els.password.focus()}),$("save-wifi-btn").addEventListener("click",e=>{e.preventDefault(),addWifiNetwork(!1)}),$("test-wifi-btn").addEventListener("click",e=>{e.preventDefault(),addWifiNetwork(!0)}),$("save-rocrail-btn").addEventListener("click",saveRocrailConfig),$("clear-rocrail-btn").addEventListener("click",clearRocrailConfig),$("refresh-btn").addEventListener("click",loadNetworks),$("forget-wifi-btn").addEventListener("click",forgetWiFi),$("restart-btn").addEventListener("click",restartDevice),$("wifi-form").addEventListener("submit",e=>{e.preventDefault(),addWifiNetwork(!0)}),$("rocrail-form").addEventListener("submit",e=>{e.preventDefault(),saveRocrailConfig()}),els.rocrailIp.addEventListener("input",()=>{let e=els.rocrailIp.value.trim();els.rocrailIp.style.borderColor=e&&!isValidIP(e)?"#f44336":"#e0e0e0"}),document.addEventListener("keydown",e=>{e.ctrlKey&&"r"===e.key&&(e.preventDefault(),loadNetworks())})}async function init(){els.deviceInfo.innerHTML="<b>Device:</b> Loading...<br><b>Status:</b> Initializing...",els.savedNetworksList.innerHTML='<div class="empty-networks">Loading...</div>',$("network-count")&&($("network-count").textContent="0"),setupEvents(),showLoading(!0);try{await Promise.all([loadDeviceStatus(),loadWifiStatus(),loadSavedNetworks(),loadRocrailStatus(),loadNetworks()]),setButtonsEnabled(!0),setInterval(async()=>{try{await Promise.all([loadDeviceStatus(),loadWifiStatus(),loadSavedNetworks(),loadRocrailStatus()])}catch(e){console.log("Background refresh failed:",e)}},3e4)}catch(e){showMessage("Initialization failed","error"),els.deviceInfo.innerHTML="<b>Device:</b> ESP32/ESP8266<br><b>Status:</b> ‚ùå Failed",els.currentRocrailConfig.innerHTML="<b>Current Server:</b> Not configured",els.currentWifiConfig.innerHTML="<b>Current:</b> Not configured",els.savedNetworksList.innerHTML='<div class="empty-networks">Failed to load</div>',setButtonsEnabled(!0)}}window.removeNetwork=removeNetwork,window.loadSavedNetworks=loadSavedNetworks,"loading"===document.readyState?document.addEventListener("DOMContentLoaded",init):init();